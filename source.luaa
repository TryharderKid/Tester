local Library = {
    Flags = {},
    Theme = {
        Background = Color3.fromRGB(30, 30, 30),
        TopBar = Color3.fromRGB(40, 40, 40),
        Text = Color3.fromRGB(255, 255, 255),
        TabSelected = Color3.fromRGB(50, 50, 50),
        TabUnselected = Color3.fromRGB(35, 35, 35)
    }
}

function Library:CreateWindow(windowName)
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    
    -- Main GUI Elements
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TopBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local MinimizeButton = Instance.new("TextButton")
    local TabHolder = Instance.new("Frame")
    local TabButtons = Instance.new("Frame")
    local TabContent = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")

    -- GUI Setup
    ScreenGui.Name = "ExecutorUI"
    ScreenGui.Parent = game:GetService("CoreGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false

    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 500, 0, 300)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
    MainFrame.BackgroundColor3 = Library.Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    MainFrame.ClipsDescendants = true

    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 30)
    TopBar.BackgroundColor3 = Library.Theme.TopBar
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame

    Title.Name = "Title"
    Title.Size = UDim2.new(1, -60, 1, 0)
    Title.BackgroundTransparency = 1
    Title.Text = windowName
    Title.TextColor3 = Library.Theme.Text
    Title.TextSize = 14
    Title.Font = Enum.Font.SourceSansBold
    Title.Parent = TopBar

    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Library.Theme.Text
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = TopBar

    MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
    MinimizeButton.Position = UDim2.new(1, -60, 0, 0)
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = Library.Theme.Text
    MinimizeButton.TextSize = 14
    MinimizeButton.Font = Enum.Font.SourceSansBold
    MinimizeButton.Parent = TopBar

    TabHolder.Name = "TabHolder"
    TabHolder.Size = UDim2.new(1, 0, 1, -30)
    TabHolder.Position = UDim2.new(0, 0, 0, 30)
    TabHolder.BackgroundTransparency = 1
    TabHolder.Parent = MainFrame

    TabButtons.Name = "TabButtons"
    TabButtons.Size = UDim2.new(0, 100, 1, 0)
    TabButtons.BackgroundTransparency = 1
    TabButtons.Parent = TabHolder

    UIListLayout.Parent = TabButtons
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 2)

    TabContent.Name = "TabContent"
    TabContent.Size = UDim2.new(1, -100, 1, 0)
    TabContent.Position = UDim2.new(0, 100, 0, 0)
    TabContent.BackgroundTransparency = 1
    TabContent.Parent = TabHolder

    -- Dragging functionality
    local dragging, dragInput, dragStart, startPos
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)

    TopBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Window functions
    local Window = {}
    Window.Tabs = {}
    Window.ActiveTab = nil

    function Window:CreateTab(tabName)
        local TabButton = Instance.new("TextButton")
        local TabPage = Instance.new("ScrollingFrame")
        local TabPageList = Instance.new("UIListLayout")

        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.BackgroundColor3 = Library.Theme.TabUnselected
        TabButton.BorderSizePixel = 0
        TabButton.Text = tabName
        TabButton.TextColor3 = Library.Theme.Text
        TabButton.Font = Enum.Font.SourceSansBold
        TabButton.Parent = TabButtons

        TabPage.Size = UDim2.new(1, 0, 1, 0)
        TabPage.BackgroundTransparency = 1
        TabPage.BorderSizePixel = 0
        TabPage.ScrollBarThickness = 4
        TabPage.Visible = false
        TabPage.Parent = TabContent

        TabPageList.Parent = TabPage
        TabPageList.SortOrder = Enum.SortOrder.LayoutOrder
        TabPageList.Padding = UDim.new(0, 5)

        local Tab = {}
        Tab.Button = TabButton
        Tab.Page = TabPage

        function Tab:Show()
            if Window.ActiveTab then
                Window.ActiveTab.Page.Visible = false
                Window.ActiveTab.Button.BackgroundColor3 = Library.Theme.TabUnselected
            end
            Tab.Page.Visible = true
            Tab.Button.BackgroundColor3 = Library.Theme.TabSelected
            Window.ActiveTab = Tab
        end

        TabButton.MouseButton1Click:Connect(function()
            Tab:Show()
        end)

        if not Window.ActiveTab then
            Tab:Show()
        end

        function Tab:AddButton(buttonText, callback)
            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, -10, 0, 30)
            Button.Position = UDim2.new(0, 5, 0, 0)
            Button.BackgroundColor3 = Library.Theme.TabUnselected
            Button.BorderSizePixel = 0
            Button.Text = buttonText
            Button.TextColor3 = Library.Theme.Text
            Button.Font = Enum.Font.SourceSans
            Button.Parent = TabPage

            Button.MouseButton1Click:Connect(function()
                callback()
            end)
            return Button
        end

        function Tab:AddToggle(toggleText, default, callback)
            local Toggle = Instance.new("Frame")
            local ToggleButton = Instance.new("TextButton")
            local Status = Instance.new("Frame")
            
            Toggle.Size = UDim2.new(1, -10, 0, 30)
            Toggle.Position = UDim2.new(0, 5, 0, 0)
            Toggle.BackgroundColor3 = Library.Theme.TabUnselected
            Toggle.BorderSizePixel = 0
            Toggle.Parent = TabPage

            ToggleButton.Size = UDim2.new(1, 0, 1, 0)
            ToggleButton.BackgroundTransparency = 1
            ToggleButton.Text = toggleText
            ToggleButton.TextColor3 = Library.Theme.Text
            ToggleButton.Font = Enum.Font.SourceSans
            ToggleButton.Parent = Toggle

            Status.Size = UDim2.new(0, 20, 0, 20)
            Status.Position = UDim2.new(1, -25, 0.5, -10)
            Status.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            Status.BorderSizePixel = 0
            Status.Parent = Toggle

            local enabled = default
            ToggleButton.MouseButton1Click:Connect(function()
                enabled = not enabled
                Status.BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                callback(enabled)
            end)
        end

        return Tab
    end

    -- Close and minimize functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            MainFrame:TweenSize(UDim2.new(0, 500, 0, 30), "Out", "Quad", 0.3, true)
        else
            MainFrame:TweenSize(UDim2.new(0, 500, 0, 300), "Out", "Quad", 0.3, true)
        end
    end)

    return Window
end

return Library
